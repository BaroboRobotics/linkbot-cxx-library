// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef PROTOBUF_message_2eproto__INCLUDED
#define PROTOBUF_message_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_message_2eproto();
void protobuf_AssignDesc_message_2eproto();
void protobuf_ShutdownFile_message_2eproto();

class Image;
class Io;
class LoadProgram;
class PrexMessage;

enum PrexMessage_MessageType {
  PrexMessage_MessageType_LOAD_PROGRAM = 0,
  PrexMessage_MessageType_IO = 1,
  PrexMessage_MessageType_IMAGE = 2,
  PrexMessage_MessageType_TERMINATE = 3,
  PrexMessage_MessageType_TERMINATE_ALL = 4,
  PrexMessage_MessageType_VERSION = 5,
  PrexMessage_MessageType_PrexMessage_MessageType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PrexMessage_MessageType_PrexMessage_MessageType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PrexMessage_MessageType_IsValid(int value);
const PrexMessage_MessageType PrexMessage_MessageType_MessageType_MIN = PrexMessage_MessageType_LOAD_PROGRAM;
const PrexMessage_MessageType PrexMessage_MessageType_MessageType_MAX = PrexMessage_MessageType_VERSION;
const int PrexMessage_MessageType_MessageType_ARRAYSIZE = PrexMessage_MessageType_MessageType_MAX + 1;

const ::google::protobuf::EnumDescriptor* PrexMessage_MessageType_descriptor();
inline const ::std::string& PrexMessage_MessageType_Name(PrexMessage_MessageType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PrexMessage_MessageType_descriptor(), value);
}
inline bool PrexMessage_MessageType_Parse(
    const ::std::string& name, PrexMessage_MessageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PrexMessage_MessageType>(
    PrexMessage_MessageType_descriptor(), name, value);
}
enum Io_FD {
  Io_FD_STDIN = 0,
  Io_FD_STDOUT = 1,
  Io_FD_STDERR = 2,
  Io_FD_Io_FD_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Io_FD_Io_FD_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Io_FD_IsValid(int value);
const Io_FD Io_FD_FD_MIN = Io_FD_STDIN;
const Io_FD Io_FD_FD_MAX = Io_FD_STDERR;
const int Io_FD_FD_ARRAYSIZE = Io_FD_FD_MAX + 1;

const ::google::protobuf::EnumDescriptor* Io_FD_descriptor();
inline const ::std::string& Io_FD_Name(Io_FD value) {
  return ::google::protobuf::internal::NameOfEnum(
    Io_FD_descriptor(), value);
}
inline bool Io_FD_Parse(
    const ::std::string& name, Io_FD* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Io_FD>(
    Io_FD_descriptor(), name, value);
}
// ===================================================================

class PrexMessage : public ::google::protobuf::Message {
 public:
  PrexMessage();
  virtual ~PrexMessage();

  PrexMessage(const PrexMessage& from);

  inline PrexMessage& operator=(const PrexMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PrexMessage& default_instance();

  void Swap(PrexMessage* other);

  // implements Message ----------------------------------------------

  inline PrexMessage* New() const { return New(NULL); }

  PrexMessage* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PrexMessage& from);
  void MergeFrom(const PrexMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PrexMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef PrexMessage_MessageType MessageType;
  static const MessageType LOAD_PROGRAM =
    PrexMessage_MessageType_LOAD_PROGRAM;
  static const MessageType IO =
    PrexMessage_MessageType_IO;
  static const MessageType IMAGE =
    PrexMessage_MessageType_IMAGE;
  static const MessageType TERMINATE =
    PrexMessage_MessageType_TERMINATE;
  static const MessageType TERMINATE_ALL =
    PrexMessage_MessageType_TERMINATE_ALL;
  static const MessageType VERSION =
    PrexMessage_MessageType_VERSION;
  static inline bool MessageType_IsValid(int value) {
    return PrexMessage_MessageType_IsValid(value);
  }
  static const MessageType MessageType_MIN =
    PrexMessage_MessageType_MessageType_MIN;
  static const MessageType MessageType_MAX =
    PrexMessage_MessageType_MessageType_MAX;
  static const int MessageType_ARRAYSIZE =
    PrexMessage_MessageType_MessageType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MessageType_descriptor() {
    return PrexMessage_MessageType_descriptor();
  }
  static inline const ::std::string& MessageType_Name(MessageType value) {
    return PrexMessage_MessageType_Name(value);
  }
  static inline bool MessageType_Parse(const ::std::string& name,
      MessageType* value) {
    return PrexMessage_MessageType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .PrexMessage.MessageType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::PrexMessage_MessageType type() const;
  void set_type(::PrexMessage_MessageType value);

  // optional bytes payload = 2;
  void clear_payload();
  static const int kPayloadFieldNumber = 2;
  const ::std::string& payload() const;
  void set_payload(const ::std::string& value);
  void set_payload(const char* value);
  void set_payload(const void* value, size_t size);
  ::std::string* mutable_payload();
  ::std::string* release_payload();
  void set_allocated_payload(::std::string* payload);

  // @@protoc_insertion_point(class_scope:PrexMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr payload_;
  int type_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static PrexMessage* default_instance_;
};
// -------------------------------------------------------------------

class LoadProgram : public ::google::protobuf::Message {
 public:
  LoadProgram();
  virtual ~LoadProgram();

  LoadProgram(const LoadProgram& from);

  inline LoadProgram& operator=(const LoadProgram& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoadProgram& default_instance();

  void Swap(LoadProgram* other);

  // implements Message ----------------------------------------------

  inline LoadProgram* New() const { return New(NULL); }

  LoadProgram* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoadProgram& from);
  void MergeFrom(const LoadProgram& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LoadProgram* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string filename = 1;
  void clear_filename();
  static const int kFilenameFieldNumber = 1;
  const ::std::string& filename() const;
  void set_filename(const ::std::string& value);
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  ::std::string* mutable_filename();
  ::std::string* release_filename();
  void set_allocated_filename(::std::string* filename);

  // optional string code = 2;
  void clear_code();
  static const int kCodeFieldNumber = 2;
  const ::std::string& code() const;
  void set_code(const ::std::string& value);
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  ::std::string* mutable_code();
  ::std::string* release_code();
  void set_allocated_code(::std::string* code);

  // repeated string argv = 3;
  int argv_size() const;
  void clear_argv();
  static const int kArgvFieldNumber = 3;
  const ::std::string& argv(int index) const;
  ::std::string* mutable_argv(int index);
  void set_argv(int index, const ::std::string& value);
  void set_argv(int index, const char* value);
  void set_argv(int index, const char* value, size_t size);
  ::std::string* add_argv();
  void add_argv(const ::std::string& value);
  void add_argv(const char* value);
  void add_argv(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& argv() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_argv();

  // optional string interpreter = 4;
  void clear_interpreter();
  static const int kInterpreterFieldNumber = 4;
  const ::std::string& interpreter() const;
  void set_interpreter(const ::std::string& value);
  void set_interpreter(const char* value);
  void set_interpreter(const char* value, size_t size);
  ::std::string* mutable_interpreter();
  ::std::string* release_interpreter();
  void set_allocated_interpreter(::std::string* interpreter);

  // @@protoc_insertion_point(class_scope:LoadProgram)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr filename_;
  ::google::protobuf::internal::ArenaStringPtr code_;
  ::google::protobuf::RepeatedPtrField< ::std::string> argv_;
  ::google::protobuf::internal::ArenaStringPtr interpreter_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static LoadProgram* default_instance_;
};
// -------------------------------------------------------------------

class Io : public ::google::protobuf::Message {
 public:
  Io();
  virtual ~Io();

  Io(const Io& from);

  inline Io& operator=(const Io& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Io& default_instance();

  void Swap(Io* other);

  // implements Message ----------------------------------------------

  inline Io* New() const { return New(NULL); }

  Io* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Io& from);
  void MergeFrom(const Io& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Io* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Io_FD FD;
  static const FD STDIN =
    Io_FD_STDIN;
  static const FD STDOUT =
    Io_FD_STDOUT;
  static const FD STDERR =
    Io_FD_STDERR;
  static inline bool FD_IsValid(int value) {
    return Io_FD_IsValid(value);
  }
  static const FD FD_MIN =
    Io_FD_FD_MIN;
  static const FD FD_MAX =
    Io_FD_FD_MAX;
  static const int FD_ARRAYSIZE =
    Io_FD_FD_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  FD_descriptor() {
    return Io_FD_descriptor();
  }
  static inline const ::std::string& FD_Name(FD value) {
    return Io_FD_Name(value);
  }
  static inline bool FD_Parse(const ::std::string& name,
      FD* value) {
    return Io_FD_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .Io.FD type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::Io_FD type() const;
  void set_type(::Io_FD value);

  // optional bytes data = 2;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:Io)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  int type_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static Io* default_instance_;
};
// -------------------------------------------------------------------

class Image : public ::google::protobuf::Message {
 public:
  Image();
  virtual ~Image();

  Image(const Image& from);

  inline Image& operator=(const Image& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Image& default_instance();

  void Swap(Image* other);

  // implements Message ----------------------------------------------

  inline Image* New() const { return New(NULL); }

  Image* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Image& from);
  void MergeFrom(const Image& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Image* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes payload = 1;
  void clear_payload();
  static const int kPayloadFieldNumber = 1;
  const ::std::string& payload() const;
  void set_payload(const ::std::string& value);
  void set_payload(const char* value);
  void set_payload(const void* value, size_t size);
  ::std::string* mutable_payload();
  ::std::string* release_payload();
  void set_allocated_payload(::std::string* payload);

  // optional string format = 2;
  void clear_format();
  static const int kFormatFieldNumber = 2;
  const ::std::string& format() const;
  void set_format(const ::std::string& value);
  void set_format(const char* value);
  void set_format(const char* value, size_t size);
  ::std::string* mutable_format();
  ::std::string* release_format();
  void set_allocated_format(::std::string* format);

  // @@protoc_insertion_point(class_scope:Image)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr payload_;
  ::google::protobuf::internal::ArenaStringPtr format_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static Image* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// PrexMessage

// optional .PrexMessage.MessageType type = 1;
inline void PrexMessage::clear_type() {
  type_ = 0;
}
inline ::PrexMessage_MessageType PrexMessage::type() const {
  // @@protoc_insertion_point(field_get:PrexMessage.type)
  return static_cast< ::PrexMessage_MessageType >(type_);
}
inline void PrexMessage::set_type(::PrexMessage_MessageType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:PrexMessage.type)
}

// optional bytes payload = 2;
inline void PrexMessage::clear_payload() {
  payload_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PrexMessage::payload() const {
  // @@protoc_insertion_point(field_get:PrexMessage.payload)
  return payload_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PrexMessage::set_payload(const ::std::string& value) {
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PrexMessage.payload)
}
inline void PrexMessage::set_payload(const char* value) {
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PrexMessage.payload)
}
inline void PrexMessage::set_payload(const void* value, size_t size) {
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PrexMessage.payload)
}
inline ::std::string* PrexMessage::mutable_payload() {
  
  // @@protoc_insertion_point(field_mutable:PrexMessage.payload)
  return payload_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PrexMessage::release_payload() {
  // @@protoc_insertion_point(field_release:PrexMessage.payload)
  
  return payload_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PrexMessage::set_allocated_payload(::std::string* payload) {
  if (payload != NULL) {
    
  } else {
    
  }
  payload_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), payload);
  // @@protoc_insertion_point(field_set_allocated:PrexMessage.payload)
}

// -------------------------------------------------------------------

// LoadProgram

// optional string filename = 1;
inline void LoadProgram::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoadProgram::filename() const {
  // @@protoc_insertion_point(field_get:LoadProgram.filename)
  return filename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoadProgram::set_filename(const ::std::string& value) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LoadProgram.filename)
}
inline void LoadProgram::set_filename(const char* value) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LoadProgram.filename)
}
inline void LoadProgram::set_filename(const char* value, size_t size) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LoadProgram.filename)
}
inline ::std::string* LoadProgram::mutable_filename() {
  
  // @@protoc_insertion_point(field_mutable:LoadProgram.filename)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoadProgram::release_filename() {
  // @@protoc_insertion_point(field_release:LoadProgram.filename)
  
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoadProgram::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    
  } else {
    
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:LoadProgram.filename)
}

// optional string code = 2;
inline void LoadProgram::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoadProgram::code() const {
  // @@protoc_insertion_point(field_get:LoadProgram.code)
  return code_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoadProgram::set_code(const ::std::string& value) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LoadProgram.code)
}
inline void LoadProgram::set_code(const char* value) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LoadProgram.code)
}
inline void LoadProgram::set_code(const char* value, size_t size) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LoadProgram.code)
}
inline ::std::string* LoadProgram::mutable_code() {
  
  // @@protoc_insertion_point(field_mutable:LoadProgram.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoadProgram::release_code() {
  // @@protoc_insertion_point(field_release:LoadProgram.code)
  
  return code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoadProgram::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    
  } else {
    
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:LoadProgram.code)
}

// repeated string argv = 3;
inline int LoadProgram::argv_size() const {
  return argv_.size();
}
inline void LoadProgram::clear_argv() {
  argv_.Clear();
}
inline const ::std::string& LoadProgram::argv(int index) const {
  // @@protoc_insertion_point(field_get:LoadProgram.argv)
  return argv_.Get(index);
}
inline ::std::string* LoadProgram::mutable_argv(int index) {
  // @@protoc_insertion_point(field_mutable:LoadProgram.argv)
  return argv_.Mutable(index);
}
inline void LoadProgram::set_argv(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:LoadProgram.argv)
  argv_.Mutable(index)->assign(value);
}
inline void LoadProgram::set_argv(int index, const char* value) {
  argv_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:LoadProgram.argv)
}
inline void LoadProgram::set_argv(int index, const char* value, size_t size) {
  argv_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:LoadProgram.argv)
}
inline ::std::string* LoadProgram::add_argv() {
  // @@protoc_insertion_point(field_add_mutable:LoadProgram.argv)
  return argv_.Add();
}
inline void LoadProgram::add_argv(const ::std::string& value) {
  argv_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:LoadProgram.argv)
}
inline void LoadProgram::add_argv(const char* value) {
  argv_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:LoadProgram.argv)
}
inline void LoadProgram::add_argv(const char* value, size_t size) {
  argv_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:LoadProgram.argv)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
LoadProgram::argv() const {
  // @@protoc_insertion_point(field_list:LoadProgram.argv)
  return argv_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
LoadProgram::mutable_argv() {
  // @@protoc_insertion_point(field_mutable_list:LoadProgram.argv)
  return &argv_;
}

// optional string interpreter = 4;
inline void LoadProgram::clear_interpreter() {
  interpreter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoadProgram::interpreter() const {
  // @@protoc_insertion_point(field_get:LoadProgram.interpreter)
  return interpreter_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoadProgram::set_interpreter(const ::std::string& value) {
  
  interpreter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LoadProgram.interpreter)
}
inline void LoadProgram::set_interpreter(const char* value) {
  
  interpreter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LoadProgram.interpreter)
}
inline void LoadProgram::set_interpreter(const char* value, size_t size) {
  
  interpreter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LoadProgram.interpreter)
}
inline ::std::string* LoadProgram::mutable_interpreter() {
  
  // @@protoc_insertion_point(field_mutable:LoadProgram.interpreter)
  return interpreter_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoadProgram::release_interpreter() {
  // @@protoc_insertion_point(field_release:LoadProgram.interpreter)
  
  return interpreter_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoadProgram::set_allocated_interpreter(::std::string* interpreter) {
  if (interpreter != NULL) {
    
  } else {
    
  }
  interpreter_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), interpreter);
  // @@protoc_insertion_point(field_set_allocated:LoadProgram.interpreter)
}

// -------------------------------------------------------------------

// Io

// optional .Io.FD type = 1;
inline void Io::clear_type() {
  type_ = 0;
}
inline ::Io_FD Io::type() const {
  // @@protoc_insertion_point(field_get:Io.type)
  return static_cast< ::Io_FD >(type_);
}
inline void Io::set_type(::Io_FD value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:Io.type)
}

// optional bytes data = 2;
inline void Io::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Io::data() const {
  // @@protoc_insertion_point(field_get:Io.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Io::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Io.data)
}
inline void Io::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Io.data)
}
inline void Io::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Io.data)
}
inline ::std::string* Io::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:Io.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Io::release_data() {
  // @@protoc_insertion_point(field_release:Io.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Io::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:Io.data)
}

// -------------------------------------------------------------------

// Image

// optional bytes payload = 1;
inline void Image::clear_payload() {
  payload_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Image::payload() const {
  // @@protoc_insertion_point(field_get:Image.payload)
  return payload_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Image::set_payload(const ::std::string& value) {
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Image.payload)
}
inline void Image::set_payload(const char* value) {
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Image.payload)
}
inline void Image::set_payload(const void* value, size_t size) {
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Image.payload)
}
inline ::std::string* Image::mutable_payload() {
  
  // @@protoc_insertion_point(field_mutable:Image.payload)
  return payload_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Image::release_payload() {
  // @@protoc_insertion_point(field_release:Image.payload)
  
  return payload_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Image::set_allocated_payload(::std::string* payload) {
  if (payload != NULL) {
    
  } else {
    
  }
  payload_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), payload);
  // @@protoc_insertion_point(field_set_allocated:Image.payload)
}

// optional string format = 2;
inline void Image::clear_format() {
  format_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Image::format() const {
  // @@protoc_insertion_point(field_get:Image.format)
  return format_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Image::set_format(const ::std::string& value) {
  
  format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Image.format)
}
inline void Image::set_format(const char* value) {
  
  format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Image.format)
}
inline void Image::set_format(const char* value, size_t size) {
  
  format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Image.format)
}
inline ::std::string* Image::mutable_format() {
  
  // @@protoc_insertion_point(field_mutable:Image.format)
  return format_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Image::release_format() {
  // @@protoc_insertion_point(field_release:Image.format)
  
  return format_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Image::set_allocated_format(::std::string* format) {
  if (format != NULL) {
    
  } else {
    
  }
  format_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), format);
  // @@protoc_insertion_point(field_set_allocated:Image.format)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::PrexMessage_MessageType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PrexMessage_MessageType>() {
  return ::PrexMessage_MessageType_descriptor();
}
template <> struct is_proto_enum< ::Io_FD> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Io_FD>() {
  return ::Io_FD_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_message_2eproto__INCLUDED
